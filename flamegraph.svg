<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="779"><g><title>libsystem_pthread.dylib`thread_start (1 samples, 0.13%)</title><rect x="0.0000%" y="309" width="0.1284%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (1 samples, 0.13%)</title><rect x="0.0000%" y="293" width="0.1284%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>datasheet`std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.13%)</title><rect x="0.0000%" y="277" width="0.1284%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>datasheet`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.13%)</title><rect x="0.0000%" y="261" width="0.1284%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>datasheet`std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.13%)</title><rect x="0.0000%" y="245" width="0.1284%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::executor::compute_partial_images (1 samples, 0.13%)</title><rect x="0.0000%" y="229" width="0.1284%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::compute_partial_image (1 samples, 0.13%)</title><rect x="0.0000%" y="213" width="0.1284%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::set_page (1 samples, 0.13%)</title><rect x="0.0000%" y="197" width="0.1284%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::digest (1 samples, 0.13%)</title><rect x="0.0000%" y="181" width="0.1284%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>datasheet`risc0_zkp::core::hash::poseidon2::poseidon2_mix (1 samples, 0.13%)</title><rect x="0.0000%" y="165" width="0.1284%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>datasheet`risc0_core::field::baby_bear::Elem::new (1 samples, 0.13%)</title><rect x="0.0000%" y="149" width="0.1284%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::load_register (3 samples, 0.39%)</title><rect x="0.1284%" y="117" width="0.3851%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="0.3784%" y="127.50"></text></g><g><title>datasheet`core::array::drain::drain_array_with (1 samples, 0.13%)</title><rect x="0.5135%" y="117" width="0.1284%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="0.7635%" y="127.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (1 samples, 0.13%)</title><rect x="0.5135%" y="101" width="0.1284%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="0.7635%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.26%)</title><rect x="0.6418%" y="69" width="0.2567%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="2"/><text x="0.8918%" y="79.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.39%)</title><rect x="0.6418%" y="101" width="0.3851%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="3"/><text x="0.8918%" y="111.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.39%)</title><rect x="0.6418%" y="85" width="0.3851%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="3"/><text x="0.8918%" y="95.50"></text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::store_u32 (5 samples, 0.64%)</title><rect x="0.6418%" y="117" width="0.6418%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="5"/><text x="0.8918%" y="127.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.26%)</title><rect x="1.2837%" y="101" width="0.2567%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="2"/><text x="1.5337%" y="111.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.26%)</title><rect x="1.2837%" y="85" width="0.2567%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="2"/><text x="1.5337%" y="95.50"></text></g><g><title>datasheet`alloc::raw_vec::finish_grow (2 samples, 0.26%)</title><rect x="1.2837%" y="69" width="0.2567%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="2"/><text x="1.5337%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.26%)</title><rect x="1.2837%" y="53" width="0.2567%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="2"/><text x="1.5337%" y="63.50"></text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::store_register (5 samples, 0.64%)</title><rect x="1.2837%" y="117" width="0.6418%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="5"/><text x="1.5337%" y="127.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (2 samples, 0.26%)</title><rect x="1.9255%" y="117" width="0.2567%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="2"/><text x="2.1755%" y="127.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step_compute (28 samples, 3.59%)</title><rect x="0.1284%" y="133" width="3.5944%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="28"/><text x="0.3784%" y="143.50">data..</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::DecodedInstruction::imm_i (1 samples, 0.13%)</title><rect x="3.7227%" y="133" width="0.1284%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="1"/><text x="3.9727%" y="143.50"></text></g><g><title>datasheet`risc0_binfmt::addr::ByteAddr::is_aligned (1 samples, 0.13%)</title><rect x="3.8511%" y="133" width="0.1284%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="1"/><text x="4.1011%" y="143.50"></text></g><g><title>datasheet`core::array::drain::drain_array_with (1 samples, 0.13%)</title><rect x="3.9795%" y="133" width="0.1284%" height="15" fill="rgb(238,160,17)" fg:x="31" fg:w="1"/><text x="4.2295%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.26%)</title><rect x="4.1078%" y="117" width="0.2567%" height="15" fill="rgb(214,148,48)" fg:x="32" fg:w="2"/><text x="4.3578%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.13%)</title><rect x="4.3646%" y="117" width="0.1284%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="1"/><text x="4.6146%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 1.16%)</title><rect x="4.4929%" y="117" width="1.1553%" height="15" fill="rgb(209,103,24)" fg:x="35" fg:w="9"/><text x="4.7429%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.39%)</title><rect x="5.6483%" y="117" width="0.3851%" height="15" fill="rgb(229,88,8)" fg:x="44" fg:w="3"/><text x="5.8983%" y="127.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::try_load_register (1 samples, 0.13%)</title><rect x="6.0334%" y="101" width="0.1284%" height="15" fill="rgb(213,181,19)" fg:x="47" fg:w="1"/><text x="6.2834%" y="111.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::load (1 samples, 0.13%)</title><rect x="6.1617%" y="101" width="0.1284%" height="15" fill="rgb(254,191,54)" fg:x="48" fg:w="1"/><text x="6.4117%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::load (4 samples, 0.51%)</title><rect x="6.0334%" y="117" width="0.5135%" height="15" fill="rgb(241,83,37)" fg:x="47" fg:w="4"/><text x="6.2834%" y="127.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (2 samples, 0.26%)</title><rect x="6.2901%" y="101" width="0.2567%" height="15" fill="rgb(233,36,39)" fg:x="49" fg:w="2"/><text x="6.5401%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.51%)</title><rect x="6.5469%" y="101" width="0.5135%" height="15" fill="rgb(226,3,54)" fg:x="51" fg:w="4"/><text x="6.7969%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.13%)</title><rect x="7.0603%" y="101" width="0.1284%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="1"/><text x="7.3103%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.90%)</title><rect x="7.1887%" y="101" width="0.8986%" height="15" fill="rgb(238,167,29)" fg:x="56" fg:w="7"/><text x="7.4387%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.64%)</title><rect x="8.0873%" y="101" width="0.6418%" height="15" fill="rgb(232,182,51)" fg:x="63" fg:w="5"/><text x="8.3373%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 2.05%)</title><rect x="8.7291%" y="101" width="2.0539%" height="15" fill="rgb(231,60,39)" fg:x="68" fg:w="16"/><text x="8.9791%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.26%)</title><rect x="10.7831%" y="101" width="0.2567%" height="15" fill="rgb(208,69,12)" fg:x="84" fg:w="2"/><text x="11.0331%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.13%)</title><rect x="11.0398%" y="101" width="0.1284%" height="15" fill="rgb(235,93,37)" fg:x="86" fg:w="1"/><text x="11.2898%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (24 samples, 3.08%)</title><rect x="11.1682%" y="85" width="3.0809%" height="15" fill="rgb(213,116,39)" fg:x="87" fg:w="24"/><text x="11.4182%" y="95.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="14.2490%" y="85" width="0.2567%" height="15" fill="rgb(222,207,29)" fg:x="111" fg:w="2"/><text x="14.4990%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.51%)</title><rect x="14.5058%" y="85" width="0.5135%" height="15" fill="rgb(206,96,30)" fg:x="113" fg:w="4"/><text x="14.7558%" y="95.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::get_page (6 samples, 0.77%)</title><rect x="15.0193%" y="85" width="0.7702%" height="15" fill="rgb(218,138,4)" fg:x="117" fg:w="6"/><text x="15.2693%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.64%)</title><rect x="15.7895%" y="53" width="0.6418%" height="15" fill="rgb(250,191,14)" fg:x="123" fg:w="5"/><text x="16.0395%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.39%)</title><rect x="16.4313%" y="53" width="0.3851%" height="15" fill="rgb(239,60,40)" fg:x="128" fg:w="3"/><text x="16.6813%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 1.54%)</title><rect x="15.7895%" y="69" width="1.5404%" height="15" fill="rgb(206,27,48)" fg:x="123" fg:w="12"/><text x="16.0395%" y="79.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.13%)</title><rect x="17.3299%" y="69" width="0.1284%" height="15" fill="rgb(225,35,8)" fg:x="135" fg:w="1"/><text x="17.5799%" y="79.50"></text></g><g><title>datasheet`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 2.18%)</title><rect x="15.7895%" y="85" width="2.1823%" height="15" fill="rgb(250,213,24)" fg:x="123" fg:w="17"/><text x="16.0395%" y="95.50">d..</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::peek_page (57 samples, 7.32%)</title><rect x="11.1682%" y="101" width="7.3171%" height="15" fill="rgb(247,123,22)" fg:x="87" fg:w="57"/><text x="11.4182%" y="111.50">datasheet`..</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::page_for_writing (4 samples, 0.51%)</title><rect x="18.4852%" y="101" width="0.5135%" height="15" fill="rgb(231,138,38)" fg:x="144" fg:w="4"/><text x="18.7352%" y="111.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::store (1 samples, 0.13%)</title><rect x="18.9987%" y="101" width="0.1284%" height="15" fill="rgb(231,145,46)" fg:x="148" fg:w="1"/><text x="19.2487%" y="111.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::data (3 samples, 0.39%)</title><rect x="19.1271%" y="101" width="0.3851%" height="15" fill="rgb(251,118,11)" fg:x="149" fg:w="3"/><text x="19.3771%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.26%)</title><rect x="19.5122%" y="85" width="0.2567%" height="15" fill="rgb(217,147,25)" fg:x="152" fg:w="2"/><text x="19.7622%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="19.7689%" y="85" width="0.1284%" height="15" fill="rgb(247,81,37)" fg:x="154" fg:w="1"/><text x="20.0189%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.39%)</title><rect x="19.8973%" y="69" width="0.3851%" height="15" fill="rgb(209,12,38)" fg:x="155" fg:w="3"/><text x="20.1473%" y="79.50"></text></g><g><title>datasheet`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.64%)</title><rect x="19.8973%" y="85" width="0.6418%" height="15" fill="rgb(227,1,9)" fg:x="155" fg:w="5"/><text x="20.1473%" y="95.50"></text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.39%)</title><rect x="20.5392%" y="69" width="0.3851%" height="15" fill="rgb(248,47,43)" fg:x="160" fg:w="3"/><text x="20.7892%" y="79.50"></text></g><g><title>datasheet`core::hash::BuildHasher::hash_one (4 samples, 0.51%)</title><rect x="20.5392%" y="85" width="0.5135%" height="15" fill="rgb(221,10,30)" fg:x="160" fg:w="4"/><text x="20.7892%" y="95.50"></text></g><g><title>datasheet`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (13 samples, 1.67%)</title><rect x="19.5122%" y="101" width="1.6688%" height="15" fill="rgb(210,229,1)" fg:x="152" fg:w="13"/><text x="19.7622%" y="111.50"></text></g><g><title>datasheet`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.13%)</title><rect x="21.1810%" y="101" width="0.1284%" height="15" fill="rgb(222,148,37)" fg:x="165" fg:w="1"/><text x="21.4310%" y="111.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.13%)</title><rect x="21.3094%" y="85" width="0.1284%" height="15" fill="rgb(234,67,33)" fg:x="166" fg:w="1"/><text x="21.5594%" y="95.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;risc0_circuit_rv32im::execute::executor::MemoryOperation&gt;&gt; (2 samples, 0.26%)</title><rect x="21.3094%" y="101" width="0.2567%" height="15" fill="rgb(247,98,35)" fg:x="166" fg:w="2"/><text x="21.5594%" y="111.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(risc0_binfmt::addr::WordAddr,usize,u32)&gt;&gt; (3 samples, 0.39%)</title><rect x="21.5661%" y="101" width="0.3851%" height="15" fill="rgb(247,138,52)" fg:x="168" fg:w="3"/><text x="21.8161%" y="111.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(risc0_binfmt::addr::WordAddr,u32)&gt;&gt; (1 samples, 0.13%)</title><rect x="21.9512%" y="101" width="0.1284%" height="15" fill="rgb(213,79,30)" fg:x="171" fg:w="1"/><text x="22.2012%" y="111.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (2 samples, 0.26%)</title><rect x="22.0796%" y="101" width="0.2567%" height="15" fill="rgb(246,177,23)" fg:x="172" fg:w="2"/><text x="22.3296%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.51%)</title><rect x="22.3363%" y="69" width="0.5135%" height="15" fill="rgb(230,62,27)" fg:x="174" fg:w="4"/><text x="22.5863%" y="79.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (4 samples, 0.51%)</title><rect x="22.8498%" y="69" width="0.5135%" height="15" fill="rgb(216,154,8)" fg:x="178" fg:w="4"/><text x="23.0998%" y="79.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 1.54%)</title><rect x="22.3363%" y="101" width="1.5404%" height="15" fill="rgb(244,35,45)" fg:x="174" fg:w="12"/><text x="22.5863%" y="111.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (12 samples, 1.54%)</title><rect x="22.3363%" y="85" width="1.5404%" height="15" fill="rgb(251,115,12)" fg:x="174" fg:w="12"/><text x="22.5863%" y="95.50"></text></g><g><title>datasheet`alloc::raw_vec::finish_grow (4 samples, 0.51%)</title><rect x="23.3633%" y="69" width="0.5135%" height="15" fill="rgb(240,54,50)" fg:x="182" fg:w="4"/><text x="23.6133%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.51%)</title><rect x="23.3633%" y="53" width="0.5135%" height="15" fill="rgb(233,84,52)" fg:x="182" fg:w="4"/><text x="23.6133%" y="63.50"></text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 2.70%)</title><rect x="23.8768%" y="101" width="2.6958%" height="15" fill="rgb(207,117,47)" fg:x="186" fg:w="21"/><text x="24.1268%" y="111.50">da..</text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (1 samples, 0.13%)</title><rect x="26.5725%" y="101" width="0.1284%" height="15" fill="rgb(249,43,39)" fg:x="207" fg:w="1"/><text x="26.8225%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.51%)</title><rect x="26.7009%" y="85" width="0.5135%" height="15" fill="rgb(209,38,44)" fg:x="208" fg:w="4"/><text x="26.9509%" y="95.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.13%)</title><rect x="27.2144%" y="85" width="0.1284%" height="15" fill="rgb(236,212,23)" fg:x="212" fg:w="1"/><text x="27.4644%" y="95.50"></text></g><g><title>datasheet`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 1.41%)</title><rect x="26.7009%" y="101" width="1.4121%" height="15" fill="rgb(242,79,21)" fg:x="208" fg:w="11"/><text x="26.9509%" y="111.50"></text></g><g><title>datasheet`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.26%)</title><rect x="28.1130%" y="101" width="0.2567%" height="15" fill="rgb(211,96,35)" fg:x="219" fg:w="2"/><text x="28.3630%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::process_memory_operations (319 samples, 40.95%)</title><rect x="6.5469%" y="117" width="40.9499%" height="15" fill="rgb(253,215,40)" fg:x="51" fg:w="319"/><text x="6.7969%" y="127.50">datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::pro..</text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.39%)</title><rect x="47.4968%" y="85" width="0.3851%" height="15" fill="rgb(211,81,21)" fg:x="370" fg:w="3"/><text x="47.7468%" y="95.50"></text></g><g><title>datasheet`core::hash::BuildHasher::hash_one (4 samples, 0.51%)</title><rect x="47.4968%" y="101" width="0.5135%" height="15" fill="rgb(208,190,38)" fg:x="370" fg:w="4"/><text x="47.7468%" y="111.50"></text></g><g><title>datasheet`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.77%)</title><rect x="47.4968%" y="117" width="0.7702%" height="15" fill="rgb(235,213,38)" fg:x="370" fg:w="6"/><text x="47.7468%" y="127.50"></text></g><g><title>datasheet`DYLD-STUB$$free (2 samples, 0.26%)</title><rect x="48.2670%" y="117" width="0.2567%" height="15" fill="rgb(237,122,38)" fg:x="376" fg:w="2"/><text x="48.5170%" y="127.50"></text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::load_u32 (347 samples, 44.54%)</title><rect x="4.1078%" y="133" width="44.5443%" height="15" fill="rgb(244,218,35)" fg:x="32" fg:w="347"/><text x="4.3578%" y="143.50">datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_..</text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="48.5237%" y="117" width="0.1284%" height="15" fill="rgb(240,68,47)" fg:x="378" fg:w="1"/><text x="48.7737%" y="127.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (2 samples, 0.26%)</title><rect x="48.6521%" y="133" width="0.2567%" height="15" fill="rgb(210,16,53)" fg:x="379" fg:w="2"/><text x="48.9021%" y="143.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step (381 samples, 48.91%)</title><rect x="0.1284%" y="149" width="48.9089%" height="15" fill="rgb(235,124,12)" fg:x="1" fg:w="381"/><text x="0.3784%" y="159.50">datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::DecodedInstruction::new (1 samples, 0.13%)</title><rect x="49.0372%" y="149" width="0.1284%" height="15" fill="rgb(224,169,11)" fg:x="382" fg:w="1"/><text x="49.2872%" y="159.50"></text></g><g><title>datasheet`risc0_zkvm::host::server::exec::executor::ExecutorImpl::run_with_callback (383 samples, 49.17%)</title><rect x="0.1284%" y="197" width="49.1656%" height="15" fill="rgb(250,166,2)" fg:x="1" fg:w="383"/><text x="0.3784%" y="207.50">datasheet`risc0_zkvm::host::server::exec::executor::ExecutorImpl::run_with_callba..</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::run (383 samples, 49.17%)</title><rect x="0.1284%" y="181" width="49.1656%" height="15" fill="rgb(242,216,29)" fg:x="1" fg:w="383"/><text x="0.3784%" y="191.50">datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::run</text></g><g><title>datasheet`std::thread::scoped::scope (383 samples, 49.17%)</title><rect x="0.1284%" y="165" width="49.1656%" height="15" fill="rgb(230,116,27)" fg:x="1" fg:w="383"/><text x="0.3784%" y="175.50">datasheet`std::thread::scoped::scope</text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::update_digests (1 samples, 0.13%)</title><rect x="49.2940%" y="133" width="0.1284%" height="15" fill="rgb(228,99,48)" fg:x="384" fg:w="1"/><text x="49.5440%" y="143.50"></text></g><g><title>datasheet`risc0_binfmt::image::DigestPair::digest (1 samples, 0.13%)</title><rect x="49.2940%" y="117" width="0.1284%" height="15" fill="rgb(253,11,6)" fg:x="384" fg:w="1"/><text x="49.5440%" y="127.50"></text></g><g><title>datasheet`risc0_zkp::core::hash::poseidon2::poseidon2_mix (1 samples, 0.13%)</title><rect x="49.2940%" y="101" width="0.1284%" height="15" fill="rgb(247,143,39)" fg:x="384" fg:w="1"/><text x="49.5440%" y="111.50"></text></g><g><title>datasheet`&lt;risc0_core::field::baby_bear::Elem as core::ops::arith::Add&gt;::add (1 samples, 0.13%)</title><rect x="49.2940%" y="85" width="0.1284%" height="15" fill="rgb(236,97,10)" fg:x="384" fg:w="1"/><text x="49.5440%" y="95.50"></text></g><g><title>datasheet`datasheet::execute_elf (385 samples, 49.42%)</title><rect x="0.1284%" y="213" width="49.4223%" height="15" fill="rgb(233,208,19)" fg:x="1" fg:w="385"/><text x="0.3784%" y="223.50">datasheet`datasheet::execute_elf</text></g><g><title>datasheet`risc0_zkvm::host::server::exec::executor::ExecutorImpl::from_elf (2 samples, 0.26%)</title><rect x="49.2940%" y="197" width="0.2567%" height="15" fill="rgb(216,164,2)" fg:x="384" fg:w="2"/><text x="49.5440%" y="207.50"></text></g><g><title>datasheet`risc0_binfmt::elf::ProgramBinary::to_image (2 samples, 0.26%)</title><rect x="49.2940%" y="181" width="0.2567%" height="15" fill="rgb(220,129,5)" fg:x="384" fg:w="2"/><text x="49.5440%" y="191.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::with_kernel (2 samples, 0.26%)</title><rect x="49.2940%" y="165" width="0.2567%" height="15" fill="rgb(242,17,10)" fg:x="384" fg:w="2"/><text x="49.5440%" y="175.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::new (2 samples, 0.26%)</title><rect x="49.2940%" y="149" width="0.2567%" height="15" fill="rgb(242,107,0)" fg:x="384" fg:w="2"/><text x="49.5440%" y="159.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::set_page (1 samples, 0.13%)</title><rect x="49.4223%" y="133" width="0.1284%" height="15" fill="rgb(251,28,31)" fg:x="385" fg:w="1"/><text x="49.6723%" y="143.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::digest (1 samples, 0.13%)</title><rect x="49.4223%" y="117" width="0.1284%" height="15" fill="rgb(233,223,10)" fg:x="385" fg:w="1"/><text x="49.6723%" y="127.50"></text></g><g><title>datasheet`risc0_zkp::core::hash::poseidon2::poseidon2_mix (1 samples, 0.13%)</title><rect x="49.4223%" y="101" width="0.1284%" height="15" fill="rgb(215,21,27)" fg:x="385" fg:w="1"/><text x="49.6723%" y="111.50"></text></g><g><title>datasheet`&lt;risc0_core::field::baby_bear::Elem as core::ops::arith::Mul&gt;::mul (1 samples, 0.13%)</title><rect x="49.4223%" y="85" width="0.1284%" height="15" fill="rgb(232,23,21)" fg:x="385" fg:w="1"/><text x="49.6723%" y="95.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step_compute (1 samples, 0.13%)</title><rect x="49.5507%" y="133" width="0.1284%" height="15" fill="rgb(244,5,23)" fg:x="386" fg:w="1"/><text x="49.8007%" y="143.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::FastDecodeTable::lookup (4 samples, 0.51%)</title><rect x="49.6791%" y="117" width="0.5135%" height="15" fill="rgb(226,81,46)" fg:x="387" fg:w="4"/><text x="49.9291%" y="127.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::load_register (2 samples, 0.26%)</title><rect x="50.1926%" y="101" width="0.2567%" height="15" fill="rgb(247,70,30)" fg:x="391" fg:w="2"/><text x="50.4426%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::load_register (1 samples, 0.13%)</title><rect x="50.4493%" y="85" width="0.1284%" height="15" fill="rgb(212,68,19)" fg:x="393" fg:w="1"/><text x="50.6993%" y="95.50"></text></g><g><title>datasheet`core::array::drain::drain_array_with (3 samples, 0.39%)</title><rect x="50.4493%" y="101" width="0.3851%" height="15" fill="rgb(240,187,13)" fg:x="393" fg:w="3"/><text x="50.6993%" y="111.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (2 samples, 0.26%)</title><rect x="50.5777%" y="85" width="0.2567%" height="15" fill="rgb(223,113,26)" fg:x="394" fg:w="2"/><text x="50.8277%" y="95.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.13%)</title><rect x="50.8344%" y="69" width="0.1284%" height="15" fill="rgb(206,192,2)" fg:x="396" fg:w="1"/><text x="51.0844%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="50.9628%" y="53" width="0.1284%" height="15" fill="rgb(241,108,4)" fg:x="397" fg:w="1"/><text x="51.2128%" y="63.50"></text></g><g><title>datasheet`alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="51.0911%" y="53" width="0.1284%" height="15" fill="rgb(247,173,49)" fg:x="398" fg:w="1"/><text x="51.3411%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.13%)</title><rect x="51.0911%" y="37" width="0.1284%" height="15" fill="rgb(224,114,35)" fg:x="398" fg:w="1"/><text x="51.3411%" y="47.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.51%)</title><rect x="50.8344%" y="85" width="0.5135%" height="15" fill="rgb(245,159,27)" fg:x="396" fg:w="4"/><text x="51.0844%" y="95.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.39%)</title><rect x="50.9628%" y="69" width="0.3851%" height="15" fill="rgb(245,172,44)" fg:x="397" fg:w="3"/><text x="51.2128%" y="79.50"></text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::store_u32 (5 samples, 0.64%)</title><rect x="50.8344%" y="101" width="0.6418%" height="15" fill="rgb(236,23,11)" fg:x="396" fg:w="5"/><text x="51.0844%" y="111.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (2 samples, 0.26%)</title><rect x="51.4763%" y="53" width="0.2567%" height="15" fill="rgb(205,117,38)" fg:x="401" fg:w="2"/><text x="51.7263%" y="63.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.64%)</title><rect x="51.4763%" y="85" width="0.6418%" height="15" fill="rgb(237,72,25)" fg:x="401" fg:w="5"/><text x="51.7263%" y="95.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5 samples, 0.64%)</title><rect x="51.4763%" y="69" width="0.6418%" height="15" fill="rgb(244,70,9)" fg:x="401" fg:w="5"/><text x="51.7263%" y="79.50"></text></g><g><title>datasheet`alloc::raw_vec::finish_grow (3 samples, 0.39%)</title><rect x="51.7330%" y="53" width="0.3851%" height="15" fill="rgb(217,125,39)" fg:x="403" fg:w="3"/><text x="51.9830%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.39%)</title><rect x="51.7330%" y="37" width="0.3851%" height="15" fill="rgb(235,36,10)" fg:x="403" fg:w="3"/><text x="51.9830%" y="47.50"></text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::store_register (6 samples, 0.77%)</title><rect x="51.4763%" y="101" width="0.7702%" height="15" fill="rgb(251,123,47)" fg:x="401" fg:w="6"/><text x="51.7263%" y="111.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::ops::arith::Add&lt;usize&gt;&gt;::add (2 samples, 0.26%)</title><rect x="52.2465%" y="101" width="0.2567%" height="15" fill="rgb(221,13,13)" fg:x="407" fg:w="2"/><text x="52.4965%" y="111.50"></text></g><g><title>datasheet`&lt;risc0_binfmt::addr::WordAddr as core::convert::From&lt;risc0_binfmt::addr::ByteAddr&gt;&gt;::from (4 samples, 0.51%)</title><rect x="52.5032%" y="101" width="0.5135%" height="15" fill="rgb(238,131,9)" fg:x="409" fg:w="4"/><text x="52.7532%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step_compute (33 samples, 4.24%)</title><rect x="50.1926%" y="117" width="4.2362%" height="15" fill="rgb(211,50,8)" fg:x="391" fg:w="33"/><text x="50.4426%" y="127.50">datas..</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::DecodedInstruction::imm_b (1 samples, 0.13%)</title><rect x="54.4288%" y="117" width="0.1284%" height="15" fill="rgb(245,182,24)" fg:x="424" fg:w="1"/><text x="54.6788%" y="127.50"></text></g><g><title>datasheet`risc0_binfmt::addr::ByteAddr::wrapping_add (1 samples, 0.13%)</title><rect x="54.5571%" y="117" width="0.1284%" height="15" fill="rgb(242,14,37)" fg:x="425" fg:w="1"/><text x="54.8071%" y="127.50"></text></g><g><title>datasheet`risc0_binfmt::addr::ByteAddr::is_aligned (1 samples, 0.13%)</title><rect x="54.6855%" y="117" width="0.1284%" height="15" fill="rgb(246,228,12)" fg:x="426" fg:w="1"/><text x="54.9355%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.26%)</title><rect x="54.8139%" y="101" width="0.2567%" height="15" fill="rgb(213,55,15)" fg:x="427" fg:w="2"/><text x="55.0639%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 1.16%)</title><rect x="55.0706%" y="101" width="1.1553%" height="15" fill="rgb(209,9,3)" fg:x="429" fg:w="9"/><text x="55.3206%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::try_load_register (1 samples, 0.13%)</title><rect x="56.2259%" y="101" width="0.1284%" height="15" fill="rgb(230,59,30)" fg:x="438" fg:w="1"/><text x="56.4759%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::page_for_writing (1 samples, 0.13%)</title><rect x="56.3543%" y="101" width="0.1284%" height="15" fill="rgb(209,121,21)" fg:x="439" fg:w="1"/><text x="56.6043%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::try_load_register (4 samples, 0.51%)</title><rect x="56.4827%" y="85" width="0.5135%" height="15" fill="rgb(220,109,13)" fg:x="440" fg:w="4"/><text x="56.7327%" y="95.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::load (1 samples, 0.13%)</title><rect x="56.9961%" y="85" width="0.1284%" height="15" fill="rgb(232,18,1)" fg:x="444" fg:w="1"/><text x="57.2461%" y="95.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::load (8 samples, 1.03%)</title><rect x="56.4827%" y="101" width="1.0270%" height="15" fill="rgb(215,41,42)" fg:x="440" fg:w="8"/><text x="56.7327%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.77%)</title><rect x="57.5096%" y="85" width="0.7702%" height="15" fill="rgb(224,123,36)" fg:x="448" fg:w="6"/><text x="57.7596%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.64%)</title><rect x="58.2798%" y="85" width="0.6418%" height="15" fill="rgb(240,125,3)" fg:x="454" fg:w="5"/><text x="58.5298%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.64%)</title><rect x="58.9217%" y="85" width="0.6418%" height="15" fill="rgb(205,98,50)" fg:x="459" fg:w="5"/><text x="59.1717%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (19 samples, 2.44%)</title><rect x="59.5635%" y="85" width="2.4390%" height="15" fill="rgb(205,185,37)" fg:x="464" fg:w="19"/><text x="59.8135%" y="95.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 3.21%)</title><rect x="62.0026%" y="69" width="3.2092%" height="15" fill="rgb(238,207,15)" fg:x="483" fg:w="25"/><text x="62.2526%" y="79.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="65.2118%" y="69" width="0.1284%" height="15" fill="rgb(213,199,42)" fg:x="508" fg:w="1"/><text x="65.4618%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="65.3402%" y="69" width="0.1284%" height="15" fill="rgb(235,201,11)" fg:x="509" fg:w="1"/><text x="65.5902%" y="79.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::get_page (11 samples, 1.41%)</title><rect x="65.4685%" y="69" width="1.4121%" height="15" fill="rgb(207,46,11)" fg:x="510" fg:w="11"/><text x="65.7185%" y="79.50"></text></g><g><title>datasheet`__rdl_alloc (1 samples, 0.13%)</title><rect x="66.8806%" y="69" width="0.1284%" height="15" fill="rgb(241,35,35)" fg:x="521" fg:w="1"/><text x="67.1306%" y="79.50"></text></g><g><title>datasheet`DYLD-STUB$$malloc (2 samples, 0.26%)</title><rect x="67.0090%" y="69" width="0.2567%" height="15" fill="rgb(243,32,47)" fg:x="522" fg:w="2"/><text x="67.2590%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.39%)</title><rect x="67.2657%" y="37" width="0.3851%" height="15" fill="rgb(247,202,23)" fg:x="524" fg:w="3"/><text x="67.5157%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.26%)</title><rect x="67.6508%" y="37" width="0.2567%" height="15" fill="rgb(219,102,11)" fg:x="527" fg:w="2"/><text x="67.9008%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.77%)</title><rect x="67.2657%" y="53" width="0.7702%" height="15" fill="rgb(243,110,44)" fg:x="524" fg:w="6"/><text x="67.5157%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.13%)</title><rect x="68.0359%" y="53" width="0.1284%" height="15" fill="rgb(222,74,54)" fg:x="530" fg:w="1"/><text x="68.2859%" y="63.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (3 samples, 0.39%)</title><rect x="68.1643%" y="53" width="0.3851%" height="15" fill="rgb(216,99,12)" fg:x="531" fg:w="3"/><text x="68.4143%" y="63.50"></text></g><g><title>datasheet`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 1.67%)</title><rect x="67.2657%" y="69" width="1.6688%" height="15" fill="rgb(226,22,26)" fg:x="524" fg:w="13"/><text x="67.5157%" y="79.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::peek_page (57 samples, 7.32%)</title><rect x="62.0026%" y="85" width="7.3171%" height="15" fill="rgb(217,163,10)" fg:x="483" fg:w="57"/><text x="62.2526%" y="95.50">datasheet`..</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::page_for_writing (1 samples, 0.13%)</title><rect x="69.3196%" y="85" width="0.1284%" height="15" fill="rgb(213,25,53)" fg:x="540" fg:w="1"/><text x="69.5696%" y="95.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::store (1 samples, 0.13%)</title><rect x="69.4480%" y="85" width="0.1284%" height="15" fill="rgb(252,105,26)" fg:x="541" fg:w="1"/><text x="69.6980%" y="95.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::data (1 samples, 0.13%)</title><rect x="69.5764%" y="85" width="0.1284%" height="15" fill="rgb(220,39,43)" fg:x="542" fg:w="1"/><text x="69.8264%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.39%)</title><rect x="69.7047%" y="69" width="0.3851%" height="15" fill="rgb(229,68,48)" fg:x="543" fg:w="3"/><text x="69.9547%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.26%)</title><rect x="70.0899%" y="53" width="0.2567%" height="15" fill="rgb(252,8,32)" fg:x="546" fg:w="2"/><text x="70.3399%" y="63.50"></text></g><g><title>datasheet`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.51%)</title><rect x="70.0899%" y="69" width="0.5135%" height="15" fill="rgb(223,20,43)" fg:x="546" fg:w="4"/><text x="70.3399%" y="79.50"></text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.39%)</title><rect x="70.6033%" y="53" width="0.3851%" height="15" fill="rgb(229,81,49)" fg:x="550" fg:w="3"/><text x="70.8533%" y="63.50"></text></g><g><title>datasheet`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15 samples, 1.93%)</title><rect x="69.7047%" y="85" width="1.9255%" height="15" fill="rgb(236,28,36)" fg:x="543" fg:w="15"/><text x="69.9547%" y="95.50">d..</text></g><g><title>datasheet`core::hash::BuildHasher::hash_one (8 samples, 1.03%)</title><rect x="70.6033%" y="69" width="1.0270%" height="15" fill="rgb(249,185,26)" fg:x="550" fg:w="8"/><text x="70.8533%" y="79.50"></text></g><g><title>datasheet`hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.13%)</title><rect x="71.6303%" y="85" width="0.1284%" height="15" fill="rgb(249,174,33)" fg:x="558" fg:w="1"/><text x="71.8803%" y="95.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;risc0_circuit_rv32im::execute::executor::MemoryOperation&gt;&gt; (1 samples, 0.13%)</title><rect x="71.7587%" y="85" width="0.1284%" height="15" fill="rgb(233,201,37)" fg:x="559" fg:w="1"/><text x="72.0087%" y="95.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(risc0_binfmt::addr::WordAddr,usize,u32)&gt;&gt; (1 samples, 0.13%)</title><rect x="71.8870%" y="85" width="0.1284%" height="15" fill="rgb(221,78,26)" fg:x="560" fg:w="1"/><text x="72.1370%" y="95.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.13%)</title><rect x="72.0154%" y="85" width="0.1284%" height="15" fill="rgb(250,127,30)" fg:x="561" fg:w="1"/><text x="72.2654%" y="95.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.13%)</title><rect x="72.1438%" y="85" width="0.1284%" height="15" fill="rgb(230,49,44)" fg:x="562" fg:w="1"/><text x="72.3938%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.39%)</title><rect x="72.2721%" y="53" width="0.3851%" height="15" fill="rgb(229,67,23)" fg:x="563" fg:w="3"/><text x="72.5221%" y="63.50"></text></g><g><title>datasheet`alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="72.6573%" y="53" width="0.1284%" height="15" fill="rgb(249,83,47)" fg:x="566" fg:w="1"/><text x="72.9073%" y="63.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5 samples, 0.64%)</title><rect x="72.2721%" y="69" width="0.6418%" height="15" fill="rgb(215,43,3)" fg:x="563" fg:w="5"/><text x="72.5221%" y="79.50"></text></g><g><title>datasheet`DYLD-STUB$$malloc (1 samples, 0.13%)</title><rect x="72.7856%" y="53" width="0.1284%" height="15" fill="rgb(238,154,13)" fg:x="567" fg:w="1"/><text x="73.0356%" y="63.50"></text></g><g><title>datasheet`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.77%)</title><rect x="72.2721%" y="85" width="0.7702%" height="15" fill="rgb(219,56,2)" fg:x="563" fg:w="6"/><text x="72.5221%" y="95.50"></text></g><g><title>datasheet`DYLD-STUB$$malloc (1 samples, 0.13%)</title><rect x="73.0424%" y="85" width="0.1284%" height="15" fill="rgb(233,0,4)" fg:x="569" fg:w="1"/><text x="73.2924%" y="95.50"></text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 2.95%)</title><rect x="73.1707%" y="85" width="2.9525%" height="15" fill="rgb(235,30,7)" fg:x="570" fg:w="23"/><text x="73.4207%" y="95.50">dat..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (1 samples, 0.13%)</title><rect x="76.1232%" y="69" width="0.1284%" height="15" fill="rgb(250,79,13)" fg:x="593" fg:w="1"/><text x="76.3732%" y="79.50"></text></g><g><title>datasheet`core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.13%)</title><rect x="76.2516%" y="69" width="0.1284%" height="15" fill="rgb(211,146,34)" fg:x="594" fg:w="1"/><text x="76.5016%" y="79.50"></text></g><g><title>datasheet`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 1.03%)</title><rect x="76.1232%" y="85" width="1.0270%" height="15" fill="rgb(228,22,38)" fg:x="593" fg:w="8"/><text x="76.3732%" y="95.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::process_memory_operations (310 samples, 39.79%)</title><rect x="57.5096%" y="101" width="39.7946%" height="15" fill="rgb(235,168,5)" fg:x="448" fg:w="310"/><text x="57.7596%" y="111.50">datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::p..</text></g><g><title>datasheet`risc0_binfmt::addr::WordAddr::page_idx (2 samples, 0.26%)</title><rect x="97.3042%" y="101" width="0.2567%" height="15" fill="rgb(221,155,16)" fg:x="758" fg:w="2"/><text x="97.5542%" y="111.50"></text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.26%)</title><rect x="97.5610%" y="69" width="0.2567%" height="15" fill="rgb(215,215,53)" fg:x="760" fg:w="2"/><text x="97.8110%" y="79.50"></text></g><g><title>datasheet`core::hash::BuildHasher::hash_one (3 samples, 0.39%)</title><rect x="97.5610%" y="85" width="0.3851%" height="15" fill="rgb(223,4,10)" fg:x="760" fg:w="3"/><text x="97.8110%" y="95.50"></text></g><g><title>datasheet`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="97.9461%" y="85" width="0.1284%" height="15" fill="rgb(234,103,6)" fg:x="763" fg:w="1"/><text x="98.1961%" y="95.50"></text></g><g><title>datasheet`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6 samples, 0.77%)</title><rect x="97.5610%" y="101" width="0.7702%" height="15" fill="rgb(227,97,0)" fg:x="760" fg:w="6"/><text x="97.8110%" y="111.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(risc0_binfmt::addr::WordAddr,usize,u32)&gt;&gt; (1 samples, 0.13%)</title><rect x="98.3312%" y="101" width="0.1284%" height="15" fill="rgb(234,150,53)" fg:x="766" fg:w="1"/><text x="98.5812%" y="111.50"></text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::load_u32 (343 samples, 44.03%)</title><rect x="54.8139%" y="117" width="44.0308%" height="15" fill="rgb(228,201,54)" fg:x="427" fg:w="343"/><text x="55.0639%" y="127.50">datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0..</text></g><g><title>datasheet`DYLD-STUB$$free (3 samples, 0.39%)</title><rect x="98.4596%" y="101" width="0.3851%" height="15" fill="rgb(222,22,37)" fg:x="767" fg:w="3"/><text x="98.7096%" y="111.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step (385 samples, 49.42%)</title><rect x="49.6791%" y="133" width="49.4223%" height="15" fill="rgb(237,53,32)" fg:x="387" fg:w="385"/><text x="49.9291%" y="143.50">datasheet`risc0_circuit_rv32im::execute::rv32im::Emulator::step</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::commit (1 samples, 0.13%)</title><rect x="99.1014%" y="133" width="0.1284%" height="15" fill="rgb(233,25,53)" fg:x="772" fg:w="1"/><text x="99.3514%" y="143.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::update_digests (1 samples, 0.13%)</title><rect x="99.1014%" y="117" width="0.1284%" height="15" fill="rgb(210,40,34)" fg:x="772" fg:w="1"/><text x="99.3514%" y="127.50"></text></g><g><title>datasheet`risc0_binfmt::image::DigestPair::digest (1 samples, 0.13%)</title><rect x="99.1014%" y="101" width="0.1284%" height="15" fill="rgb(241,220,44)" fg:x="772" fg:w="1"/><text x="99.3514%" y="111.50"></text></g><g><title>datasheet`risc0_zkp::core::hash::poseidon2::multiply_by_m_ext (1 samples, 0.13%)</title><rect x="99.1014%" y="85" width="0.1284%" height="15" fill="rgb(235,28,35)" fg:x="772" fg:w="1"/><text x="99.3514%" y="95.50"></text></g><g><title>datasheet`std::thread::scoped::scope (388 samples, 49.81%)</title><rect x="49.5507%" y="149" width="49.8074%" height="15" fill="rgb(210,56,17)" fg:x="386" fg:w="388"/><text x="49.8007%" y="159.50">datasheet`std::thread::scoped::scope</text></g><g><title>datasheet`&lt;risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt; as risc0_circuit_rv32im::execute::r0vm::Risc0Context&gt;::load_u32 (1 samples, 0.13%)</title><rect x="99.2298%" y="133" width="0.1284%" height="15" fill="rgb(224,130,29)" fg:x="773" fg:w="1"/><text x="99.4798%" y="143.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::run (389 samples, 49.94%)</title><rect x="49.5507%" y="165" width="49.9358%" height="15" fill="rgb(235,212,8)" fg:x="386" fg:w="389"/><text x="49.8007%" y="175.50">datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::run</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::reset (1 samples, 0.13%)</title><rect x="99.3582%" y="149" width="0.1284%" height="15" fill="rgb(223,33,50)" fg:x="774" fg:w="1"/><text x="99.6082%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="99.3582%" y="133" width="0.1284%" height="15" fill="rgb(219,149,13)" fg:x="774" fg:w="1"/><text x="99.6082%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.13%)</title><rect x="99.3582%" y="117" width="0.1284%" height="15" fill="rgb(250,156,29)" fg:x="774" fg:w="1"/><text x="99.6082%" y="127.50"></text></g><g><title>datasheet`risc0_zkvm::host::server::exec::executor::ExecutorImpl::run_with_callback (391 samples, 50.19%)</title><rect x="49.5507%" y="181" width="50.1926%" height="15" fill="rgb(216,193,19)" fg:x="386" fg:w="391"/><text x="49.8007%" y="191.50">datasheet`risc0_zkvm::host::server::exec::executor::ExecutorImpl::run_with_callback</text></g><g><title>datasheet`risc0_circuit_rv32im::execute::executor::Executor&lt;S&gt;::new (2 samples, 0.26%)</title><rect x="99.4865%" y="165" width="0.2567%" height="15" fill="rgb(216,135,14)" fg:x="775" fg:w="2"/><text x="99.7365%" y="175.50"></text></g><g><title>datasheet`risc0_circuit_rv32im::execute::pager::PagedMemory::new (2 samples, 0.26%)</title><rect x="99.4865%" y="149" width="0.2567%" height="15" fill="rgb(241,47,5)" fg:x="775" fg:w="2"/><text x="99.7365%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.26%)</title><rect x="99.4865%" y="133" width="0.2567%" height="15" fill="rgb(233,42,35)" fg:x="775" fg:w="2"/><text x="99.7365%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.26%)</title><rect x="99.4865%" y="117" width="0.2567%" height="15" fill="rgb(231,13,6)" fg:x="775" fg:w="2"/><text x="99.7365%" y="127.50"></text></g><g><title>datasheet`risc0_zkvm::host::server::exec::executor::ExecutorImpl::from_elf (1 samples, 0.13%)</title><rect x="99.7433%" y="181" width="0.1284%" height="15" fill="rgb(207,181,40)" fg:x="777" fg:w="1"/><text x="99.9933%" y="191.50"></text></g><g><title>datasheet`risc0_binfmt::elf::ProgramBinary::to_image (1 samples, 0.13%)</title><rect x="99.7433%" y="165" width="0.1284%" height="15" fill="rgb(254,173,49)" fg:x="777" fg:w="1"/><text x="99.9933%" y="175.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::with_kernel (1 samples, 0.13%)</title><rect x="99.7433%" y="149" width="0.1284%" height="15" fill="rgb(221,1,38)" fg:x="777" fg:w="1"/><text x="99.9933%" y="159.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::new (1 samples, 0.13%)</title><rect x="99.7433%" y="133" width="0.1284%" height="15" fill="rgb(206,124,46)" fg:x="777" fg:w="1"/><text x="99.9933%" y="143.50"></text></g><g><title>datasheet`risc0_binfmt::image::MemoryImage::set_page (1 samples, 0.13%)</title><rect x="99.7433%" y="117" width="0.1284%" height="15" fill="rgb(249,21,11)" fg:x="777" fg:w="1"/><text x="99.9933%" y="127.50"></text></g><g><title>datasheet`risc0_binfmt::image::Page::digest (1 samples, 0.13%)</title><rect x="99.7433%" y="101" width="0.1284%" height="15" fill="rgb(222,201,40)" fg:x="777" fg:w="1"/><text x="99.9933%" y="111.50"></text></g><g><title>datasheet`risc0_zkp::core::hash::poseidon2::poseidon2_mix (1 samples, 0.13%)</title><rect x="99.7433%" y="85" width="0.1284%" height="15" fill="rgb(235,61,29)" fg:x="777" fg:w="1"/><text x="99.9933%" y="95.50"></text></g><g><title>datasheet`risc0_zkp::core::hash::poseidon2::full_round (1 samples, 0.13%)</title><rect x="99.7433%" y="69" width="0.1284%" height="15" fill="rgb(219,207,3)" fg:x="777" fg:w="1"/><text x="99.9933%" y="79.50"></text></g><g><title>datasheet`&lt;risc0_core::field::baby_bear::Elem as core::ops::arith::Mul&gt;::mul (1 samples, 0.13%)</title><rect x="99.7433%" y="53" width="0.1284%" height="15" fill="rgb(222,56,46)" fg:x="777" fg:w="1"/><text x="99.9933%" y="63.50"></text></g><g><title>all (779 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="779"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (778 samples, 99.87%)</title><rect x="0.1284%" y="309" width="99.8716%" height="15" fill="rgb(231,124,27)" fg:x="1" fg:w="778"/><text x="0.3784%" y="319.50">dyld`start</text></g><g><title>datasheet`main (778 samples, 99.87%)</title><rect x="0.1284%" y="293" width="99.8716%" height="15" fill="rgb(249,195,6)" fg:x="1" fg:w="778"/><text x="0.3784%" y="303.50">datasheet`main</text></g><g><title>datasheet`std::rt::lang_start_internal (778 samples, 99.87%)</title><rect x="0.1284%" y="277" width="99.8716%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="778"/><text x="0.3784%" y="287.50">datasheet`std::rt::lang_start_internal</text></g><g><title>datasheet`std::rt::lang_start::_{{closure}} (778 samples, 99.87%)</title><rect x="0.1284%" y="261" width="99.8716%" height="15" fill="rgb(206,201,31)" fg:x="1" fg:w="778"/><text x="0.3784%" y="271.50">datasheet`std::rt::lang_start::_{{closure}}</text></g><g><title>datasheet`std::sys::backtrace::__rust_begin_short_backtrace (778 samples, 99.87%)</title><rect x="0.1284%" y="245" width="99.8716%" height="15" fill="rgb(231,57,52)" fg:x="1" fg:w="778"/><text x="0.3784%" y="255.50">datasheet`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>datasheet`datasheet::main (778 samples, 99.87%)</title><rect x="0.1284%" y="229" width="99.8716%" height="15" fill="rgb(248,177,22)" fg:x="1" fg:w="778"/><text x="0.3784%" y="239.50">datasheet`datasheet::main</text></g><g><title>datasheet`datasheet::Datasheet::run_cmd (393 samples, 50.45%)</title><rect x="49.5507%" y="213" width="50.4493%" height="15" fill="rgb(215,211,37)" fg:x="386" fg:w="393"/><text x="49.8007%" y="223.50">datasheet`datasheet::Datasheet::run_cmd</text></g><g><title>datasheet`datasheet::execute_elf (393 samples, 50.45%)</title><rect x="49.5507%" y="197" width="50.4493%" height="15" fill="rgb(241,128,51)" fg:x="386" fg:w="393"/><text x="49.8007%" y="207.50">datasheet`datasheet::execute_elf</text></g><g><title>datasheet`core::ptr::drop_in_place&lt;risc0_zkvm::host::server::exec::executor::ExecutorImpl&gt; (1 samples, 0.13%)</title><rect x="99.8716%" y="181" width="0.1284%" height="15" fill="rgb(227,165,31)" fg:x="778" fg:w="1"/><text x="100.1216%" y="191.50"></text></g><g><title>datasheet`core::ptr::drop_in_place&lt;risc0_binfmt::image::MemoryImage&gt; (1 samples, 0.13%)</title><rect x="99.8716%" y="165" width="0.1284%" height="15" fill="rgb(228,167,24)" fg:x="778" fg:w="1"/><text x="100.1216%" y="175.50"></text></g><g><title>datasheet`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.13%)</title><rect x="99.8716%" y="149" width="0.1284%" height="15" fill="rgb(228,143,12)" fg:x="778" fg:w="1"/><text x="100.1216%" y="159.50"></text></g></svg></svg>